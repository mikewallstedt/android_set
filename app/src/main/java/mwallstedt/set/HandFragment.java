package mwallstedt.set;import android.app.Activity;import android.content.Intent;import android.content.res.Resources;import android.graphics.Color;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.support.v4.app.Fragment;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.Toast;import java.util.ArrayList;import java.util.Arrays;import java.util.HashSet;import java.util.List;import java.util.Set;public class HandFragment extends Fragment {	private static final String TAG = HandFragment.class.getCanonicalName();    private static final String SAVED_TRIAD_COUNT = "SAVED_TRIAD_COUNT";    private static final String SAVED_CARDS_DISPLAYED = "SAVED_CARDS_DISPLAYED";    public static final String EXTRA_CARD = "com.example.setsolver.EXTRA_CARD";    private static final int TRIAD_SIZE = 3;    private static final int DEFAULT_NUMBER_OF_TRIADS = 4;    private List<Slot[]> mSlots = new ArrayList<Slot[]>();    private List<Card> mInitCards = new ArrayList<Card>();    private int mX, mY;    private int mXDim, mYDim;    private class Slot {		private final ImageView mView;        private Card mCard;		private Slot(final int x, final int y) {			mView = new ImageView(getActivity());			mView.setOnClickListener(new OnClickListener() {				@Override				public void onClick(View arg0) {                    mSlots.get(mX)[mY].unhighlight();					highlight(getResources().getColor(R.color.cursor));					mX = x;					mY = y;				}			});		}        private Card getCard() {            return mCard;        }		private void showCard(Card card) {			mCard = card;    		Drawable drawable = getActivity().getResources().getDrawable(card.getDrawableId());    		mView.setImageDrawable(drawable);		}        private ImageView getView() {            return mView;        }        private void highlight(int color) {            mView.setBackgroundColor(color);            mView.invalidate();        }		private void unhighlight() {            mView.setBackgroundColor(Color.WHITE);            mView.invalidate();		}	}    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mYDim = TRIAD_SIZE;        if (savedInstanceState != null) {            mXDim = savedInstanceState.getInt(SAVED_TRIAD_COUNT);            mInitCards = (List<Card>) savedInstanceState.getSerializable(SAVED_CARDS_DISPLAYED);        } else {            mXDim = DEFAULT_NUMBER_OF_TRIADS;            for (int i = 0; i < mXDim * mYDim; i++) {                mInitCards.add(Card.BLANK_CARD);            }        }    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup parent,    		Bundle savedInstanceState) {    	super.onCreateView(inflater, parent, savedInstanceState);    	View v = inflater.inflate(R.layout.fragment_hand, parent, false);        final LinearLayout trioHolderView = (LinearLayout) v.findViewById(R.id.trio_holder);        mX = 0;        mY = 0;        initializeSlots(trioHolderView);        if (mXDim > 0) {            mSlots.get(0)[0].highlight(getResources().getColor(R.color.cursor));        }		Button matchButton = (Button) v.findViewById(R.id.match_button);		matchButton.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				solve();			}		});        Button newTriadButton = (Button) v.findViewById(R.id.new_triad_button);        newTriadButton.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View view) {                onAddTriad(trioHolderView);            }        });        Button deleteTriadButton = (Button) v.findViewById(R.id.delete_triad_button);        deleteTriadButton.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View view) {                onDeleteTriad(trioHolderView);            }        });        return v;    }    private void initializeSlots(LinearLayout trioHolderView) {        for (int x = 0; x < mXDim; x++) {            Slot[] slots = new Slot[TRIAD_SIZE];            LinearLayout trioView = new LinearLayout(getActivity());            trioView.setOrientation(LinearLayout.VERTICAL);            for (int y = 0; y < mYDim; y++) {                slots[y] = new Slot(x, y);                trioView.addView(slots[y].getView());                slots[y].showCard(mInitCards.get(y + x * mYDim));            }            mSlots.add(slots);            trioHolderView.addView(trioView);        }    }    private void onAddTriad(LinearLayout trioHolderView) {        int x = mXDim;        mXDim++;        Slot[] slots = new Slot[TRIAD_SIZE];        LinearLayout trioView = new LinearLayout(getActivity());        trioView.setOrientation(LinearLayout.VERTICAL);        for (int y = 0; y < mYDim; y++) {            slots[y] = new Slot(x, y);            trioView.addView(slots[y].getView());            slots[y].showCard(Card.BLANK_CARD);        }        mSlots.add(slots);        trioHolderView.addView(trioView);        mSlots.get(mX)[mY].unhighlight();        mX = 0;        mY = 0;        mSlots.get(0)[0].highlight(getResources().getColor(R.color.cursor));    }    private void onDeleteTriad(LinearLayout trioHolderView) {        mSlots.get(mX)[mY].unhighlight();        int x = mSlots.size() - 1;        if (x < 0) {            return;        }        Slot[] removed = mSlots.remove(x);        for (Slot slot : removed) {            getMainActivity().removeCardInPlay(slot.getCard());        }        mXDim--;        trioHolderView.removeViewAt(x + 1);        if (x >= 1) {            mX = 0;            mY = 0;            mSlots.get(0)[0].highlight(getResources().getColor(R.color.cursor));        }    }    public void setCardAtCursor(Card card) {        Slot slot = mSlots.get(mX)[mY];        slot.showCard(card);        getMainActivity().removeCardInPlay(slot.getCard());        highlightNext();            }    private void highlightNext() {        mSlots.get(mX)[mY].unhighlight();        mX += 1;        if (mX >= mXDim) {            mX = 0;            mY += 1;        }        if (mY >= mYDim) {            mY = 0;        }        mSlots.get(mX)[mY].highlight(getResources().getColor(R.color.cursor));    }    private MainActivity getMainActivity() {        return (MainActivity) getActivity();    }    @Override    public void onSaveInstanceState(Bundle savedInstanceState) {        savedInstanceState.putInt(SAVED_TRIAD_COUNT, mXDim);    }    private void solve() {        List<Set<Card>> sets = findSets();        Set<Card> unified = new HashSet<Card>();        for (Set<Card> set: sets) {            unified.addAll(set);        }        int solutionColor = getResources().getColor(R.color.solution);        for (Set<Card> set : sets) {            for (int i = 0; i < (mXDim * mYDim); i++) {                int x = i % mXDim;                int y = i / mXDim;                Slot slot = mSlots.get(x)[y];                if (slot.getCard() == null || !unified.contains(slot.getCard())) {                    slot.unhighlight();                }                else if (set.contains(slot.getCard())) {                    slot.highlight(solutionColor);                }            }            solutionColor += 0x00222222;        }        Toast toast = Toast.makeText(getActivity(), "Num sets: " + sets.size(), Toast.LENGTH_SHORT);        toast.show();    }    private List<Set<Card>> findSets() {        List<Set<Card>> result = new ArrayList<Set<Card>>();        for (int first = 0; first < (mXDim * mYDim); first++) {    		int firstX = first % mXDim;    		int firstY = first / mXDim;            Card firstCard = mSlots.get(firstX)[firstY].getCard();    		if ((firstCard == null) || firstCard.isBlank()) {    			continue;    		}    		for (int second = first + 1; second < (mXDim * mYDim); second++) {    			int secondX = second % mXDim;    			int secondY = second / mXDim;                Card secondCard = mSlots.get(secondX)[secondY].getCard();    			if ((secondCard == null) || secondCard.isBlank()) {    				continue;    			}                Card thirdCard = firstCard.getCompleter(secondCard);    			for (int third = second + 1; third < (mXDim * mYDim); third++) {    				int thirdX = third % mXDim;    				int thirdY = third / mXDim;                    if (thirdCard.equals(mSlots.get(thirdX)[thirdY].getCard())) {    					result.add(new HashSet<Card>(Arrays.asList(firstCard, secondCard, thirdCard)));    				}    			}    		}    	}        return  result;    }}